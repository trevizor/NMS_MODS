////////////////////////////////////////////////////////////////////////////////
///
///     @file       UIFragment.h
///     @author     User
///     @date       
///
///     @brief      DebugFragment
///
///     Copyright (c) 2008 Hello Games Ltd. All Rights Reserved.
///
////////////////////////////////////////////////////////////////////////////////


//-----------------------------------------------------------------------------
//      Compilation defines 


//-----------------------------------------------------------------------------
//      Include files

#include "Common/Defines.shader.h"
#include "Common/Common.shader.h"
#include "Common/CommonUniforms.shader.h"
#include "Fullscreen/PostCommon.h"

#include "Common/CommonPostProcess.shader.h"
#include "Common/Noise3D.glsl"
#include "Common/CommonFragment.shader.h"


//-----------------------------------------------------------------------------
//      Global Data

//-----------------------------------------------------------------------------
//      Typedefs and Classes 

DECLARE_INPUT
    INPUT_SCREEN_POSITION

        INPUT( vec2, mTexCoordsVec2, TEXCOORD0 )

DECLARE_END


#if defined ( D_UI )

vec4
BilinearAlphaCorrectionRead(
    SAMPLER2DARG( lTexture ),
    vec2 lTexCoords )
    {
        //vec2 lResolution = lUniforms.mpPerFrame->gFrameBufferSizeVec4.xy;

//#if defined( D_PLATFORM_DX12 ) || defined( D_PLATFORM_ORBIS ) || ( ( defined(GL_ARB_texture_gather) || (__VERSION__ >= 400) ) && !defined( D_PLATFORM_PC_LOWEND ) )
#if 0

        uvec2 luResolution = GetResolution( lTexture );

        vec2 lResolution = vec2( luResolution.x, luResolution.y );

        vec2 lPixelLoc  = lTexCoords * lResolution - vec2( 0.5, 0.5 );

        vec2 lSampleLoc = floor( lPixelLoc ) / lResolution;
        vec2 lSubPixel = fract( lPixelLoc );

        vec4 lBilinearWeights = vec4( 1.0 - lSubPixel.x, lSubPixel.x, lSubPixel.x, 1.0 - lSubPixel.x ) *
            vec4( lSubPixel.y, lSubPixel.y, 1.0 - lSubPixel.y, 1.0 - lSubPixel.y );

        vec4 lTextureR = textureGatherRed( lTexture, lSampleLoc );
        vec4 lTextureG = textureGatherGreen( lTexture, lSampleLoc );
        vec4 lTextureB = textureGatherBlue( lTexture, lSampleLoc );
        vec4 lTextureA = textureGatherAlpha( lTexture, lSampleLoc );

        float lAlpha = dot( lTextureA, lBilinearWeights );

        if( lAlpha > 0.0 )
        {
            lTextureR *= lTextureA;
            lTextureG *= lTextureA;
            lTextureB *= lTextureA;

            vec4 lResult = vec4( dot( lTextureR, lBilinearWeights ),
                                 dot( lTextureG, lBilinearWeights ),
                                 dot( lTextureB, lBilinearWeights ),
                                 lAlpha );

            lResult.xyz /= lAlpha;

            return lResult;
        }

        return vec4( 0.0, 0.0, 0.0, 0.0 );

#else

        return texture2D( lTexture, lTexCoords );

#endif
    }

FRAGMENT_MAIN_COLOUR_SRT
{
    vec2 lCoordsVec2         = TEX_COORDS.xy;
    vec2 lDeformedCoordsVec2 = GetBulgeDeform( lCoordsVec2 );

    vec3 lFragmentColourVec3 = vec3( 0.0,0.0,0.0 );

    float lfOverallMagnitude = lUniforms.mpCustomPerMesh->gUIDeformVec4.x;
    if( lfOverallMagnitude > 0.0 )
    {
        float lfFlickerAmount = lUniforms.mpCustomPerMesh->gUIDeformVec4.y;
        lDeformedCoordsVec2.x +=
            ( ( lfFlickerAmount * 0.1 ) + 2.0 * ( max( sin( lUniforms.mpPerFrame->gfTime + sin( lUniforms.mpPerFrame->gfTime * 113.0 ) ), 0.98 ) - 0.98 ) ) *
            0.05 *
            sin( 113.0 * lUniforms.mpPerFrame->gfTime * sin( lDeformedCoordsVec2.y * 827.0 ) ) *
            lfOverallMagnitude;
    }

    vec4 lUIColourVec4         = BilinearAlphaCorrectionRead( SAMPLER2DPARAM_SRT( lUniforms.mpCustomPerMesh, gUIMap ), lDeformedCoordsVec2 );

    if( lDeformedCoordsVec2.y > 1.0 || lDeformedCoordsVec2.y < 0.0 )
    {
        lUIColourVec4 = vec4( 0.0, 0.0, 0.0, 1.0 );
    }

    FRAGMENT_COLOUR = lUIColourVec4;
}

#else

//float width = 1280.0;
//float height = 720.0;

vec4 GetDropletColour(
    SAMPLER2DARG( lBufferMap ),
    CustomPerMeshUniforms lUniforms, 
    vec2 texcoord,
    vec2 lDeformedTexcoordVec2 )
{
    vec3 final = texture2DLod(lBufferMap, texcoord, 0.0).rgb;
    float timer         = lUniforms.gWashParamsVec4.x;
    float resettimer    = lUniforms.gWashParamsVec4.y;
    float dropfade = clamp(resettimer*10.0,0.0,1.0);

    float grainsize = 25.0;
    //texture edge bleed removal
    float fade = 12.0;
    vec2 distortFade = vec2(0.0, 0.0);
    distortFade.x = clamp(lDeformedTexcoordVec2.x*fade,0.0,1.0);
    distortFade.x -= clamp(1.0-(1.0-lDeformedTexcoordVec2.x)*fade,0.0,1.0);
    distortFade.y = clamp(lDeformedTexcoordVec2.y*fade,0.0,1.0);
    distortFade.y -= clamp(1.0-(1.0-lDeformedTexcoordVec2.y)*fade,0.0,1.0); 
    float dfade = 1.0-pow((1.0-distortFade.x*distortFade.y),2.0);

    if (resettimer < 1.0)
    {
        vec2 wave=vec2(0.0, 0.0);
        vec2 wavecoordR;
        vec2 wavecoordG;
        vec2 wavecoordB;    	
        wave.x = sin((texcoord.x-texcoord.y*4.0)-timer*1.5)*0.25;
        wave.x += cos((texcoord.y*8.0-texcoord.x*12.0)+timer*4.2)*0.5;
        wave.x += sin((texcoord.x*18.0+texcoord.y*16.0)+timer*3.5)*0.25;

        wave.y = sin((texcoord.x*4.0+texcoord.x*5.0)+timer*2.5)*0.25;
        wave.y += cos((texcoord.y*6.0+texcoord.x*12.0)-timer*2.5)*0.5;
        wave.y += sin((texcoord.x*22.0-texcoord.y*24.0)+timer*4.5)*0.25;

        wave = wave*dfade;
        wavecoordR = texcoord-wave*0.002;
        wavecoordG = texcoord-wave*0.003;	
        wavecoordB = texcoord-wave*0.004;
        vec3 wavecolor = vec3(0.0, 0.0, 0.0);
        wavecolor.r = texture2DLod(lBufferMap, wavecoordR, 0.0).r;
        wavecolor.g = texture2DLod(lBufferMap, wavecoordG, 0.0).g;
        wavecolor.b = texture2DLod(lBufferMap, wavecoordB, 0.0).b;
        final = mix(wavecolor,final,dropfade);


        if (dfade > 0.0 && dropfade > 0.0)
        {
            //_SCE_BREAK();
            float noiz = 0.0;
            noiz += snoise(vec3(lDeformedTexcoordVec2*vec2(1280.0/90.0,720.0/250.0)+vec2(0.0,timer*1.2),1.0+timer*0.2))*0.25;
            noiz += snoise(vec3(lDeformedTexcoordVec2*vec2(1280.0/1200.0,720.0/1800.0)+vec2(0.0,timer*0.5),3.0+timer*0.3))*0.75;
           
            float dropletmask = smoothstep(0.02+resettimer,0.03+resettimer,noiz*0.5+0.5);		
            dropletmask = clamp(dropletmask,0.0,1.0);
            if (dropletmask > 0.0)
            {
                float droplet;
                droplet   = clamp(smoothstep(0.0+resettimer,0.5+resettimer,noiz*0.5+0.5),0.0,1.0);
                droplet   = pow(clamp(droplet,0.0,1.0),0.1)*3.0;
                vec2 droplets   = vec2(dFdx(lDeformedTexcoordVec2+vec2(droplet,droplet)).r,dFdy(lDeformedTexcoordVec2+vec2(droplet,droplet)).g);
                vec2 dropcoordR;
                vec2 dropcoordG;	
                vec2 dropcoordB;
                droplets = droplets*dfade;
                dropcoordR = (texcoord-droplets * 1.2);
                dropcoordG = (texcoord-droplets * 1.3);	
                dropcoordB = (texcoord-droplets * 1.5);	
                vec3 dropletcolor = vec3(0.0,0.0,0.0);	
                dropletcolor.r = texture2DLod(lBufferMap, dropcoordR, 0.0).r;
                dropletcolor.g = texture2DLod(lBufferMap, dropcoordG, 0.0).g;
                dropletcolor.b = texture2DLod(lBufferMap, dropcoordB, 0.0).b;
                    
                final = mix(final,dropletcolor,dropletmask*dropfade);
            }
        }
    }

    return vec4(final,1.0);

}

//-----------------------------------------------------------------------------
///
///     ComputeLightColour
///
///     @brief      ComputeLightColour
///
///     @param      void
///     @return     
///
//-----------------------------------------------------------------------------
vec3
ComputeLightColour(
in vec3  lLightDirectionVec3,
in vec3  lLightColourVec3,
in vec3  lNormalVec3)
{
    float lfLightDirDotN;
    float lfLightColour;

    lfLightDirDotN = -dot(lNormalVec3, lLightDirectionVec3);

    // back bit
    //float lfBackLightMin = 0.05;
    //float lfBackLight    = min( 0.5, lfBackLightMin + (1.0 + lfLightColour)*(0.5-lfBackLightMin));

    lfLightColour = (lfLightDirDotN + 1.0) * 0.5;
    //lfLightColour = max( lfLightColour, lfBackLight );

    return vec3(lfLightColour * lLightColourVec3);
}


vec3
Scanline(
    vec2  uv,
    float angle,
    vec3  color,
    float size,
    float strength,
    float decay)
{
    uv[1] -= (0.5 + 0.5 * cos(mod(angle, 3.14*2.0) / 2.0));
    uv[1] *= 1000.0 * size;

    float col = 1.0 / uv[1];
    float damp = clamp(pow(abs(uv[0]), decay) + pow(abs(1.0 - uv[0]), decay), 0.0, 1.0);
    col -= damp * 0.2;
    col = clamp(col, 0.0, strength);
    return color * col;
}

STATIC_CONST vec3 kLumcoeff = vec3(0.299, 0.587, 0.114);

//-----------------------------------------------------------------------------
//      Functions

vec3
GetColourSeparation(
    SAMPLER2DARG( lBufferMap ),
    float lfDistance,
    vec2  lScreenCoordsVec2 )
{
    vec3 lSeparateColourVec3;

    lSeparateColourVec3.r = texture2DLod( lBufferMap, vec2( lScreenCoordsVec2.x + lfDistance, lScreenCoordsVec2.y ), 0.0 ).x;
    lSeparateColourVec3.g = texture2DLod( lBufferMap, vec2( lScreenCoordsVec2.x,              lScreenCoordsVec2.y ), 0.0 ).y;
    lSeparateColourVec3.b = texture2DLod( lBufferMap, vec2( lScreenCoordsVec2.x - lfDistance, lScreenCoordsVec2.y ), 0.0 ).z;

    return lSeparateColourVec3;
}

vec3
GetVignette(
    vec2  lScreenCoordsVec2 )
{
    float lfStart     = 0.85;
    float lfVignette  = 16.0 * lScreenCoordsVec2.x * lScreenCoordsVec2.y * ( 1.0 - lScreenCoordsVec2.x ) * ( 1.0 - lScreenCoordsVec2.y );

    lfVignette         = lfVignette + lfStart;
    lfVignette        *= lfVignette;
    lfVignette         = clamp( lfVignette, 0.0, 1.0 );

    return vec3( lfVignette, lfVignette, lfVignette );
}

vec3
GetScanlines(
    float lfTime,
    vec2  lScreenCoordsVec2 )
{
    vec3 lEffectsColourVec3 = vec3( 0.95, 1.05, 0.95 );

    lEffectsColourVec3 *= 0.95  + 0.05  * sin(  10.0 * lfTime + lScreenCoordsVec2.y * 1280.0 ); // Scan lines
    lEffectsColourVec3 *= 0.995 + 0.005 * sin( 110.0 * lfTime );                                // Pulse

    return lEffectsColourVec3;
}

FRAGMENT_MAIN_COLOUR_SRT
{
    vec2 lCoordsVec2              = TEX_COORDS.xy;
    vec2 lScreenspacePositionVec2 = SCREENSPACE_AS_RENDERTARGET_UVS( lCoordsVec2 );

    // Get the scene colour
    vec3 lFragmentColourVec3 = GetDropletColour( SAMPLER2DPARAM_SRT( lUniforms.mpCustomPerMesh,gBufferMap ),  DEREF_PTR( lUniforms.mpCustomPerMesh ), lCoordsVec2, lScreenspacePositionVec2 ).xyz;

    vec2 lDeformedCoordsVec2 = GetBulgeDeform( lCoordsVec2 );
#ifdef D_PLATFORM_OPENGL
    lDeformedCoordsVec2.y = 1.0 - lDeformedCoordsVec2.y;
#endif

    vec2 lTextureCoordinatesVec2 = lCoordsVec2;
#ifdef D_PLATFORM_OPENGL
    lTextureCoordinatesVec2.y = 1.0 - lTextureCoordinatesVec2.y;
#endif


    float lfOverallMagnitude     = lUniforms.mpCustomPerMesh->gUIDeformVec4.x;  
    float lfFlickerAmount        = lUniforms.mpCustomPerMesh->gUIDeformVec4.y;
    float lfColourSeperateAmount = lUniforms.mpCustomPerMesh->gUIDeformVec4.z;
    float lfIsUIEnabled          = lUniforms.mpCustomPerMesh->gUIDeformVec4.w;
    bool  lbIsUIEnabled          = lUniforms.mpCustomPerMesh->gUIDeformVec4.w > -0.5 ? true : false;

    float lfVignetteCutoffLow    = lUniforms.mpCustomPerMesh->gVignetteVec4.x;
    float lfVignetteCutoffHigh   = lUniforms.mpCustomPerMesh->gVignetteVec4.y;
    float lfVignetteAdjust       = lUniforms.mpCustomPerMesh->gVignetteVec4.z;
    float lfBinocularsOn         = lUniforms.mpCustomPerMesh->gVignetteVec4.w;

    float lfRedFlash             = lUniforms.mpCustomPerMesh->gCriticalHitPointsVec4.x;
    float lfFullScreenDesat      = lUniforms.mpCustomPerMesh->gCriticalHitPointsVec4.y;
    float lfWhiteFlash           = lUniforms.mpCustomPerMesh->gCriticalHitPointsVec4.z;

    float lfRedVignetteStrength  = lUniforms.mpCustomPerMesh->gUILowHealthVignetteVec4.x;
    float lfLowHealthPulseRate   = lUniforms.mpCustomPerMesh->gUILowHealthVignetteVec4.y;
    float lfShieldDownScanline   = lUniforms.mpCustomPerMesh->gUILowHealthVignetteVec4.z;
    float lfEffectProgression    = lUniforms.mpCustomPerMesh->gUILowHealthVignetteVec4.w;
  
    if (lfOverallMagnitude > 0.0)
    {

        lDeformedCoordsVec2.x += 
            ((lfFlickerAmount * 0.1) + 2.0 * (max( sin( lUniforms.mpPerFrame->gfTime + sin( lUniforms.mpPerFrame->gfTime * 113.0 ) ), 0.98) - 0.98)) * 
            0.05 *
            sin( 113.0 * lUniforms.mpPerFrame->gfTime * sin( lDeformedCoordsVec2.y * 827.0 ) ) * 
            lfOverallMagnitude;
    }


    // Colour separation
    if( lbIsUIEnabled )
    {
        float lfColourSeparationStrength  = saturate( saturate( ( lDeformedCoordsVec2.y ) * 4.5 ) );

        vec3 lSeparateColourVec3 = GetColourSeparation( SAMPLER2DPARAM_SRT( lUniforms.mpCustomPerMesh, gBufferMap ), 3.0 / 1280.0, lCoordsVec2 );

        lFragmentColourVec3      = mix( lSeparateColourVec3, lFragmentColourVec3, lfColourSeparationStrength );
    }


    // Vignette and scanlines       
    float lfEffectsColourMix = saturate( saturate( ( lDeformedCoordsVec2.y ) * 4.5 ) );
    if( lbIsUIEnabled )
    {
        vec3 lEffectColourVec3   = lFragmentColourVec3;
        vec3 lVignetteColourVec3 = GetVignette( lScreenspacePositionVec2 );
        vec3 lScanlineVec3       = GetScanlines( lUniforms.mpPerFrame->gfTime, lDeformedCoordsVec2 );

        lEffectColourVec3       *= lVignetteColourVec3 * lScanlineVec3;
        lFragmentColourVec3      = mix( lEffectColourVec3, lFragmentColourVec3, lfEffectsColourMix );
    }


    // Full screen vignette
    float dFullScreen = distance( lScreenspacePositionVec2.xy, vec2(0.5, 0.5));
    float lfLowHealthVignette = 1.0 - smoothstep( 0.3, 1.0, dFullScreen );

    //
    // Circular vignette. Only have it on the top of the screen
    //
    vec2 lNewCoord  = lScreenspacePositionVec2.xy;
    lNewCoord.y      = max( lNewCoord.y, 0.5 );
    float d = distance( lNewCoord, vec2(0.5,0.5) );
    float lfCircleVignette = 1.0 - smoothstep( lfVignetteCutoffLow, lfVignetteCutoffHigh, d );

    lFragmentColourVec3 = mix( vec3(0.0, 0.0, 0.0), lFragmentColourVec3, lfCircleVignette );

    // Blend in the UI colour
    // HAZARD
    float lfHazardProgression = saturate( 1.0 - lfVignetteAdjust );
    float lfExtraEffect       = saturate( lfVignetteAdjust - 1.0 );
    lfHazardProgression       = mix( lfHazardProgression, 0.0, lfExtraEffect );

    if (lfHazardProgression < 1.0)
    {
        vec3 lFullScreenNormalVec3 = DecodeNormalMap( texture2D( SAMPLER_GETMAP( lUniforms.mpCustomPerMesh, gUIFullscreenNormal ), lTextureCoordinatesVec2 ) );
        vec4 lUIRefraction         = texture2D( SAMPLER_GETMAP( lUniforms.mpCustomPerMesh, gUIFullScreenRefraction ), lTextureCoordinatesVec2 );

        float lfDistortionSeperateAmount = 64.0 / 1280.0;
        vec2 lDistortedTextureCoords = lTextureCoordinatesVec2.xy + lFullScreenNormalVec3.xy * lfDistortionSeperateAmount;
        vec2 lDistortedBufferCoords  = lCoordsVec2.xy + lFullScreenNormalVec3.xy * lfDistortionSeperateAmount;
        vec4 lUIFullscreenVec4       = texture2DLod( SAMPLER_GETMAP( lUniforms.mpCustomPerMesh,gUIFullscreenEffect ), lDistortedTextureCoords, 0.0);

        float lfHazardVignette     = 1.0 - smoothstep(0.3, 1.0, dFullScreen * 2.0);
        float lfAlphaMask          = mix( 1.0 - lfHazardVignette, 1.0, lfExtraEffect );
        float lfHeightmapIntensity = clamp(lUIFullscreenVec4.a - lfHazardProgression, 0.0, 1.0) * lfAlphaMask;
        lfHeightmapIntensity      *= clamp(1.0 / (1.0 - lfHazardProgression), 0.0, 1.0);
        lfHeightmapIntensity       = mix( lfHeightmapIntensity, 1.0, lfExtraEffect );

        float lfHazardIntensity    = lfHeightmapIntensity * step( lfHazardProgression, lUIFullscreenVec4.a );
        lfHazardIntensity          = clamp( lfHazardIntensity, 0.0, 1.0 );
        lfHazardIntensity          = mix( lfHazardIntensity, 1.0, lfExtraEffect );

        if (lfHazardIntensity > 0.0)
        {
            // Lighting
            vec3 lCameraRightVec3 = MAT4_GET_COLUMN(lUniforms.mpPerFrame->gCameraMat4, 0);
            vec3 lCameraUpVec3    = MAT4_GET_COLUMN(lUniforms.mpPerFrame->gCameraMat4, 1);
            vec3 lCameraAtVec3    = MAT4_GET_COLUMN(lUniforms.mpPerFrame->gCameraMat4, 2);           

            vec3 lLightColLinear = GammaCorrectOutput( lUniforms.mpCommonPerMesh->gLightColourVec4.rgb );
            vec3 lLightCol = mix( lLightColLinear , vec3(1.0, 1.0, 1.0), 0.5);

            vec3 lDistortedCol = texture2DLod(  SAMPLER_GETMAP( lUniforms.mpCustomPerMesh, gBufferMap ), lDistortedBufferCoords, 0.0).rgb;
            lDistortedCol = mix( lDistortedCol, vec3( 0.0, 0.0, 0.0 ),  (1.0 - lfHazardVignette) * lfExtraEffect );

            // We want always some kind of specular value, a fixed light direction and a 
            // view angle using the hemisphere pointing in the opposite direction will do the trick
            vec3 lLightDir = normalize(vec3(0.0, 0.0, 1.0));
            vec3 lViewDir = normalize(vec3((lCameraAtVec3.x), (lCameraAtVec3.y), -1.0));

            float specularReflection = lUIRefraction.y * pow(max(0.0, dot(reflect(lLightDir, lFullScreenNormalVec3.xyz), lViewDir)), 250.0);

            vec3 lHazardColour = mix(lDistortedCol, lUIFullscreenVec4.rgb * lLightCol, lUIRefraction.x) + float2vec3(specularReflection);
                        
            lFragmentColourVec3.rgb = mix(lFragmentColourVec3.rgb, lHazardColour, lfHazardIntensity);
        }
    }

    // Binoculars
    if( lfBinocularsOn > 0.0 )
    {
        vec2 lBinocularCoords = lTextureCoordinatesVec2;

        vec4 lUIZoomVec4        = texture2DLod( SAMPLER_GETMAP( lUniforms.mpCustomPerMesh, gUIZoomEffect ), lBinocularCoords, 0.0 );
        lFragmentColourVec3.rgb = mix( lFragmentColourVec3.rgb, lUIZoomVec4.rgb, lUIZoomVec4.a * lfBinocularsOn );
    }

    // Shield down desaturation and overlay effect
    if (lfEffectProgression > 0.0)
    {
        float lum = dot(lFragmentColourVec3.rgb, kLumcoeff);
        lFragmentColourVec3.rgb = mix( lFragmentColourVec3.rgb, float2vec3( lum ), lfEffectProgression * (1.0 - lfLowHealthVignette) );        
    }
    
    // Shield down scanline
    float lfScanLineValue     = abs( lfShieldDownScanline );
    float lfScanLineIntensity = 1.0 - abs(lfScanLineValue - 0.5) * 2.0;
    if (lfScanLineIntensity > 0.0)
    {
        vec2 lScanlineCoords = lDeformedCoordsVec2;
        float lfScanLineDirection = sign( lfShieldDownScanline );

        lFragmentColourVec3.rgb += Scanline(lScanlineCoords, lfScanLineValue * 3.1416 * 2.0, vec3(0.0, 0.8, 1.0) * 1.0, 0.025 * lfScanLineDirection, 0.2, 3.0) * lfScanLineIntensity;
        lFragmentColourVec3.rgb += Scanline(lScanlineCoords, lfScanLineValue * 3.1416 * 2.0, vec3(1.0, 1.0, 1.0) * 3.0, 0.25  * lfScanLineDirection, 0.2, 3.0) * lfScanLineIntensity;
    }

    // Desaturation
    {
        float lumFullScreen = dot( lFragmentColourVec3.rgb, kLumcoeff );
        lFragmentColourVec3.rgb = mix( lFragmentColourVec3.rgb, float2vec3( lumFullScreen ) * 0.8, lfFullScreenDesat );
    }

    // Red flash
    lFragmentColourVec3.rgb = mix(lFragmentColourVec3.rgb, vec3(0.8, 0.0, 0.0), lfRedFlash * 0.4);

    // Red vignette
    float lfCriticHealthVignette = 1.0 - smoothstep(0.05, 1.0, dFullScreen);
    float lfRedVignettePulseAmount = max( 0.0, sin( lUniforms.mpPerFrame->gfTime * lfLowHealthPulseRate ) );
    lFragmentColourVec3.rgb += vec3( lfVignetteCutoffHigh * 0.7 + 0.3 * lfRedVignettePulseAmount, 0.0, 0.0 ) * lfRedVignetteStrength * (1.0 - lfCriticHealthVignette);

    // White flash
    lFragmentColourVec3.rgb = mix(lFragmentColourVec3.rgb, vec3(1.0, 1.0, 1.0), lfWhiteFlash);

    FRAGMENT_COLOUR = vec4( lFragmentColourVec3, 1.0 );    
    //FRAGMENT_COLOUR = vec4( 1.0, 0.0, 0.0, 0.5 );    
    
}

#endif